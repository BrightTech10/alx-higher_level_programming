Tests for module ``0-add_integer``
======================================

This module defines an integer addition function ``add_integer(a, b=98)``

Usage:
======

::

First import ``add_integer`` from module
    >>> add_integer = __import__('0-add_integer').add_integer

``add_integer(...)`` returns the sum of of two integers
Arguments are casted to an integer if any is found to be a float

::

Test for both a(int) positive and b(int) positive
    >>> add_integer(1, 2)
    3

::

Test for no argument
    >>> add_integer()
    Traceback (most recent call last):
        ...
    TypeError: add_integer() missing 1 required positional argument: 'a'

::

Test for a(int) positive and b(int) negative
    >>> add_integer(100, -2)
    98

::

Test for a(int) positive and b not supplied
    >>> add_integer(2)
    100

::

Test for a(int) negative and b(int) positive
    >>> add_integer(-100, 2)
    -98

::

Test for a(int) negative and b(int) negative
    >>> add_integer(-6, -6)
    -12

::

Test for a(int) positive and b(string)
    >>> add_integer(8, "string")
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

::

Test for a(string) and b(int) positive
    >>> add_integer("string", 8)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

::

Test for NoneType
    >>> add_integer(None)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

::

Test for a(int) positive and b(float) positive
    >>> add_integer(3, 6.7)
    9

::

Test for a(int) positive and b(float) negative
    >>> add_integer(3, -6.7)
    -3

::

Test for a(float) positive and b(int) positive
    >>> add_integer(5.5, 6)
    11

::

Test for a(float) negative and b(int) positive
    >>> add_integer(-5.5, 6)
    1

::

Test for a(float) positive and b(float) positive
    >>> add_integer(5.5, 6.2)
    11

::

Test for a(float) negative and b(float) negative
    >>> add_integer(-5.5, -6.2)
    -11

::

Test for a(float max) and b(float max)
    >>> import sys
    >>> add_integer(sys.float_info.max, sys.float_info.max)
    359538626972463141629054847463408713596141135051689993197834953606314521560057077521179117265533756343080917907028764928468642653778928365536935093407075033972099821153102564152490980180778657888151737016910267884609166473806445896331617118664246696549595652408289446337476354361838599762500808052368249716736

::

Test for a(float max)
    >>> import sys
    >>> add_integer(sys.float_info.max)
    179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858466

::

Test for a(float min)
    >>> import sys
    >>> add_integer(sys.float_info.min)
    98

::

Test for a(float min) and b(float min)
    >>> import sys
    >>> add_integer(sys.float_info.min, sys.float_info.min)
    0

::

Test for a(float NaN)
    >>> from cmath import nan
    >>> add_integer(nan)
    Traceback (most recent call last):
        ...
    ValueError: cannot convert float NaN to integer
