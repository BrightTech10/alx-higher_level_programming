Tests for module ``7-base_geometry``
==================================

This module defines the functions ``area()`` and ``integer_validator(name, value)``

Usage:
=====

First import ``area()`` and ``integer_validator(name, value)`` from module
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

``area()`` is not implemented
``integer_validator`` validates a given value

::

Test for area()
    >>> bg = BaseGeometry()
    >>> bg.area()
    Traceback (most recent call last):
        ...
    Exception: area() is not implemented

::

Test for value(int) positive
    >>> bg.integer_validator("name", 57)

::

Test for value(int) negative
    >>> bg.integer_validator("name", -57)
    Traceback (most recent call last):
        ...
    ValueError: name must be greater than 0

::

Test for value(zero)
    >>> bg.integer_validator("name", 0)
    Traceback (most recent call last):
        ...
    ValueError: name must be greater than 0

::

Test for value(string)
    >>> bg.integer_validator("name", "John")
    Traceback (most recent call last):
        ...
    TypeError: name must be an integer

::

Test for value(float) positive
    >>> bg.integer_validator("name", 8.0)
    Traceback (most recent call last):
        ...
    TypeError: name must be an integer

::

Test for missing argument
    >>> bg.integer_validator(-8.0)
    Traceback (most recent call last):
        ...
    TypeError: integer_validator() missing 1 required positional argument: 'value'

::

Test for missing argument
    >>> bg.integer_validator()
    Traceback (most recent call last):
        ...
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

::

Test for name(int) and value(int) negative
    >>> bg.integer_validator(9, -10)
    Traceback (most recent call last):
        ...
    TypeError: unsupported operand type(s) for +: 'int' and 'str'

::

Test for name(float) and value(int) negative
    >>> bg.integer_validator(9.0, -10)
    Traceback (most recent call last):
        ...
    TypeError: unsupported operand type(s) for +: 'float' and 'str'

::

Test for name(NoneType) and value(int) negative
    >>> bg.integer_validator(None, -10)
    Traceback (most recent call last):
        ...
    TypeError: unsupported operand type(s) for +: 'NoneType' and 'str'
